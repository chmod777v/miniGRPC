// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	proto "grpc/pkg/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgconn "github.com/jackc/pgx/v5/pgconn"
)

// MockDatabaseInterface is a mock of DatabaseInterface interface.
type MockDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseInterfaceMockRecorder
}

// MockDatabaseInterfaceMockRecorder is the mock recorder for MockDatabaseInterface.
type MockDatabaseInterfaceMockRecorder struct {
	mock *MockDatabaseInterface
}

// NewMockDatabaseInterface creates a new mock instance.
func NewMockDatabaseInterface(ctrl *gomock.Controller) *MockDatabaseInterface {
	mock := &MockDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseInterface) EXPECT() *MockDatabaseInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabaseInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseInterface)(nil).Close))
}

// Exec mocks base method.
func (m *MockDatabaseInterface) Exec(ctx context.Context, sql string, args ...interface{}) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDatabaseInterfaceMockRecorder) Exec(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabaseInterface)(nil).Exec), varargs...)
}

// QueryRow mocks base method.
func (m *MockDatabaseInterface) QueryRow(ctx context.Context, sql string, args ...interface{}) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDatabaseInterfaceMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDatabaseInterface)(nil).QueryRow), varargs...)
}

// MockServiceServerInterface is a mock of ServiceServerInterface interface.
type MockServiceServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceServerInterfaceMockRecorder
}

// MockServiceServerInterfaceMockRecorder is the mock recorder for MockServiceServerInterface.
type MockServiceServerInterfaceMockRecorder struct {
	mock *MockServiceServerInterface
}

// NewMockServiceServerInterface creates a new mock instance.
func NewMockServiceServerInterface(ctrl *gomock.Controller) *MockServiceServerInterface {
	mock := &MockServiceServerInterface{ctrl: ctrl}
	mock.recorder = &MockServiceServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceServerInterface) EXPECT() *MockServiceServerInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServiceServerInterface) Get(ctx context.Context, req *proto.GetRequest) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceServerInterfaceMockRecorder) Get(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceServerInterface)(nil).Get), ctx, req)
}

// Post mocks base method.
func (m *MockServiceServerInterface) Post(ctx context.Context, req *proto.PostRequest) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, req)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockServiceServerInterfaceMockRecorder) Post(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockServiceServerInterface)(nil).Post), ctx, req)
}

// MockGRPCClientInterface is a mock of GRPCClientInterface interface.
type MockGRPCClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCClientInterfaceMockRecorder
}

// MockGRPCClientInterfaceMockRecorder is the mock recorder for MockGRPCClientInterface.
type MockGRPCClientInterfaceMockRecorder struct {
	mock *MockGRPCClientInterface
}

// NewMockGRPCClientInterface creates a new mock instance.
func NewMockGRPCClientInterface(ctrl *gomock.Controller) *MockGRPCClientInterface {
	mock := &MockGRPCClientInterface{ctrl: ctrl}
	mock.recorder = &MockGRPCClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCClientInterface) EXPECT() *MockGRPCClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGRPCClientInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockGRPCClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGRPCClientInterface)(nil).Close))
}

// GetRequestGrpc mocks base method.
func (m *MockGRPCClientInterface) GetRequestGrpc(ctx context.Context, requestData *proto.GetRequest) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestGrpc", ctx, requestData)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestGrpc indicates an expected call of GetRequestGrpc.
func (mr *MockGRPCClientInterfaceMockRecorder) GetRequestGrpc(ctx, requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestGrpc", reflect.TypeOf((*MockGRPCClientInterface)(nil).GetRequestGrpc), ctx, requestData)
}

// PostRequestGrpc mocks base method.
func (m *MockGRPCClientInterface) PostRequestGrpc(ctx context.Context, requestData *proto.PostRequest) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRequestGrpc", ctx, requestData)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRequestGrpc indicates an expected call of PostRequestGrpc.
func (mr *MockGRPCClientInterfaceMockRecorder) PostRequestGrpc(ctx, requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRequestGrpc", reflect.TypeOf((*MockGRPCClientInterface)(nil).PostRequestGrpc), ctx, requestData)
}

// MockHTTPServerInterface is a mock of HTTPServerInterface interface.
type MockHTTPServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServerInterfaceMockRecorder
}

// MockHTTPServerInterfaceMockRecorder is the mock recorder for MockHTTPServerInterface.
type MockHTTPServerInterfaceMockRecorder struct {
	mock *MockHTTPServerInterface
}

// NewMockHTTPServerInterface creates a new mock instance.
func NewMockHTTPServerInterface(ctrl *gomock.Controller) *MockHTTPServerInterface {
	mock := &MockHTTPServerInterface{ctrl: ctrl}
	mock.recorder = &MockHTTPServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPServerInterface) EXPECT() *MockHTTPServerInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHTTPServerInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockHTTPServerInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHTTPServerInterface)(nil).Close))
}

// GetRequestGrpc mocks base method.
func (m *MockHTTPServerInterface) GetRequestGrpc(ctx context.Context, requestData *proto.GetRequest) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestGrpc", ctx, requestData)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestGrpc indicates an expected call of GetRequestGrpc.
func (mr *MockHTTPServerInterfaceMockRecorder) GetRequestGrpc(ctx, requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestGrpc", reflect.TypeOf((*MockHTTPServerInterface)(nil).GetRequestGrpc), ctx, requestData)
}

// PostRequestGrpc mocks base method.
func (m *MockHTTPServerInterface) PostRequestGrpc(ctx context.Context, requestData *proto.PostRequest) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRequestGrpc", ctx, requestData)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRequestGrpc indicates an expected call of PostRequestGrpc.
func (mr *MockHTTPServerInterfaceMockRecorder) PostRequestGrpc(ctx, requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRequestGrpc", reflect.TypeOf((*MockHTTPServerInterface)(nil).PostRequestGrpc), ctx, requestData)
}
