// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_grpctests is a generated GoMock package.
package mock_grpctests

import (
	context "context"
	database "grpc/pkg/database"
	proto "grpc/pkg/proto"
	interfaces "grpc/testingGRPC/interfaces"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockDatabase) CreatePerson(ctx context.Context, req *proto.PostRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockDatabaseMockRecorder) CreatePerson(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockDatabase)(nil).CreatePerson), ctx, req)
}

// GetPerson mocks base method.
func (m *MockDatabase) GetPerson(ctx context.Context, id int64) (*database.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerson", ctx, id)
	ret0, _ := ret[0].(*database.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockDatabaseMockRecorder) GetPerson(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockDatabase)(nil).GetPerson), ctx, id)
}

// MockGRPCServer is a mock of GRPCServer interface.
type MockGRPCServer struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCServerMockRecorder
}

// MockGRPCServerMockRecorder is the mock recorder for MockGRPCServer.
type MockGRPCServerMockRecorder struct {
	mock *MockGRPCServer
}

// NewMockGRPCServer creates a new mock instance.
func NewMockGRPCServer(ctrl *gomock.Controller) *MockGRPCServer {
	mock := &MockGRPCServer{ctrl: ctrl}
	mock.recorder = &MockGRPCServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCServer) EXPECT() *MockGRPCServerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGRPCServer) Get(ctx context.Context, req *proto.GetRequest) (*proto.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*proto.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGRPCServerMockRecorder) Get(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGRPCServer)(nil).Get), ctx, req)
}

// Post mocks base method.
func (m *MockGRPCServer) Post(ctx context.Context, req *proto.PostRequest) (*proto.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, req)
	ret0, _ := ret[0].(*proto.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockGRPCServerMockRecorder) Post(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockGRPCServer)(nil).Post), ctx, req)
}

// MockDatabaseScan is a mock of DatabaseScan interface.
type MockDatabaseScan struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseScanMockRecorder
}

// MockDatabaseScanMockRecorder is the mock recorder for MockDatabaseScan.
type MockDatabaseScanMockRecorder struct {
	mock *MockDatabaseScan
}

// NewMockDatabaseScan creates a new mock instance.
func NewMockDatabaseScan(ctrl *gomock.Controller) *MockDatabaseScan {
	mock := &MockDatabaseScan{ctrl: ctrl}
	mock.recorder = &MockDatabaseScanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseScan) EXPECT() *MockDatabaseScanMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockDatabaseScan) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockDatabaseScanMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockDatabaseScan)(nil).Scan), dest...)
}

// MockDatabaseQS is a mock of DatabaseQS interface.
type MockDatabaseQS struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseQSMockRecorder
}

// MockDatabaseQSMockRecorder is the mock recorder for MockDatabaseQS.
type MockDatabaseQSMockRecorder struct {
	mock *MockDatabaseQS
}

// NewMockDatabaseQS creates a new mock instance.
func NewMockDatabaseQS(ctrl *gomock.Controller) *MockDatabaseQS {
	mock := &MockDatabaseQS{ctrl: ctrl}
	mock.recorder = &MockDatabaseQSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseQS) EXPECT() *MockDatabaseQSMockRecorder {
	return m.recorder
}

// QueryRow mocks base method.
func (m *MockDatabaseQS) QueryRow(ctx context.Context, sql string, args ...any) interfaces.DatabaseScan {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(interfaces.DatabaseScan)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDatabaseQSMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDatabaseQS)(nil).QueryRow), varargs...)
}
