// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_httptests is a generated GoMock package.
package mock_httptests

import (
	context "context"
	g_serv "grpc/pkg/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHTTPServer is a mock of HTTPServer interface.
type MockHTTPServer struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServerMockRecorder
}

// MockHTTPServerMockRecorder is the mock recorder for MockHTTPServer.
type MockHTTPServerMockRecorder struct {
	mock *MockHTTPServer
}

// NewMockHTTPServer creates a new mock instance.
func NewMockHTTPServer(ctrl *gomock.Controller) *MockHTTPServer {
	mock := &MockHTTPServer{ctrl: ctrl}
	mock.recorder = &MockHTTPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPServer) EXPECT() *MockHTTPServerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHTTPServer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockHTTPServerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHTTPServer)(nil).Close))
}

// GetRequestGrpc mocks base method.
func (m *MockHTTPServer) GetRequestGrpc(ctx context.Context, requestData *g_serv.GetRequest) (*g_serv.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestGrpc", ctx, requestData)
	ret0, _ := ret[0].(*g_serv.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestGrpc indicates an expected call of GetRequestGrpc.
func (mr *MockHTTPServerMockRecorder) GetRequestGrpc(ctx, requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestGrpc", reflect.TypeOf((*MockHTTPServer)(nil).GetRequestGrpc), ctx, requestData)
}

// PostRequestGrpc mocks base method.
func (m *MockHTTPServer) PostRequestGrpc(ctx context.Context, requestData *g_serv.PostRequest) (*g_serv.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRequestGrpc", ctx, requestData)
	ret0, _ := ret[0].(*g_serv.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRequestGrpc indicates an expected call of PostRequestGrpc.
func (mr *MockHTTPServerMockRecorder) PostRequestGrpc(ctx, requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRequestGrpc", reflect.TypeOf((*MockHTTPServer)(nil).PostRequestGrpc), ctx, requestData)
}
